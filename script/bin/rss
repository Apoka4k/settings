#!/usr/bin/env python


import os
import re
import sh
import sys


skip_extensions = [".js", ".css", ".svg", ".html", ".map", ".cpython", ".ipynb"]
skip_extensions = [".js", ".css", ".svg", ".html", ".map", ".cpython"]

bred = lambda x: "\033[1;31m" + x + "\033[0;38m"
cyan = lambda x: "\033[0;36m" + x + "\033[0;38m"
green = lambda x: "\033[0;32m" + x + "\033[0;38m"
red = lambda x: "\033[0;31m" + x + "\033[0;38m"
yellow = lambda x: "\033[0;33m" + x + "\033[0;38m"


def helper():
    sys.stdout.write("Usage: %s term [number]\n"
                     % os.path.basename(__file__))
    sys.exit(0)


def error():
    sys.stderr.write(os.path.basename(__file__) + ": " + \
                     red("error") + "\n")
    sys.stderr.write("Usage: %s term [number]\n"
                     % os.path.basename(__file__))
    sys.exit(1)


if __name__ == "__main__":

    # check ars
    if "--help" in sys.argv or "-h" in sys.argv:
        helper()

    if len(sys.argv) not in [2, 3]:
        error()

    if len(sys.argv) >= 3:
        try:
            if int(sys.argv[2]) < 0:
                error()
        except ValueError:
            error()

    # get args
    term = sys.argv[1]
    number = sys.argv[2] if len(sys.argv) >= 3 else "0"

    # grep
    try:
        out = sh.grep("-R", "-n", "-C %s" % number, "-i", term, os.getcwd())
    except sh.ErrorReturnCode_1:
        sys.exit(0)

    # print output
    pattern = re.compile(re.escape(term), re.I)
    replace = lambda matchobj: green(matchobj.group(0))

    sys.stdout.write("\n")
    sys.stdout.write(bred("-" * 70) + "\n")
    sys.stdout.write("\n")

    for line in out.split("\n"):

        if line == "--":
            sys.stdout.write("\n")
            continue

        match = re.match("(.*?)[:-](\d+)[:-]"
                         "(?:\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d.\d\d\d:)"
                         " *(.*)", line)

        if match is None:
            match = re.match("(.*?)[:-](\d+)[:-] *(.*)", line)

        if match is not None:
            fname = match.group(1)
            line_num = match.group(2)
            text = match.group(3)

            skipped = False
            for ext in skip_extensions:
                if fname.endswith(ext):
                    sys.stdout.write(yellow(fname) + " " + \
                                     cyan(line_num) + " " + \
                                     "..." + "\n" )
                    skipped = True
                    break

            if not skipped:
                sys.stdout.write(yellow(fname) + " " + \
                                 cyan(line_num) + " " + \
                                 re.sub(pattern, replace, text) + "\n")

    sys.stdout.write("\n")
    sys.stdout.write(bred("-" * 70) + "\n")
    sys.stdout.write("\n")

    sys.exit(0)
