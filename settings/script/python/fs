#!/usr/bin/python


# imports
import os
import subprocess
import sys
import tempfile

# custom imports
import common
from common import color


# main
if __name__ == "__main__":

    # get script name
    fname = os.path.realpath(__file__)

    # check args
    if len(sys.argv) not in [2, 3]:
        print common.get_err_msg(fname)
        common.show_usage(fname, ["string"], ["number"])
        sys.exit()

    # get args
    string = "\"" + sys.argv[1] + "\""

    # get current dir
    current_dir = os.getcwd()

    # execute grep
    _, tmp_grep_output = tempfile.mkstemp()
    cmd = common.command("grep", "-Rn", string, current_dir,
                         ">", tmp_grep_output)
    res = subprocess.call(cmd, shell=True)

    # get grep output
    with open(tmp_grep_output, "r") as tmp_grep_output_ptr:
        lines = tmp_grep_output_ptr.readlines()
    os.unlink(tmp_grep_output)

    # analyze grep output
    met_fnames = []
    fnames_dict = {}

    for line in lines:

        if "~" in line:
            continue

        if ":" in line:
            met_fname, rest = line.split(":", 1)

            if ":" in rest:
                line_number, _ = rest.split(":", 1)

                if met_fname in met_fnames:
                    fnames_dict[met_fname].append(int(line_number))
                else:
                    met_fnames.append(met_fname)
                    fnames_dict[met_fname] = [int(line_number)]

    # sort files
    met_fnames.sort()

    for fname in met_fnames:
        fnames_dict[met_fname].sort()

    # print results
    text = "\n"

    max_length = len(str(len(met_fnames)))
    text_list = []
    index_dict = {}
    fname_dict = {}
    counter = 1

    for met_fname in met_fnames:
        current_length = len(str(counter))
        current_difference = max_length - current_length

        text_line = " " * (4 + current_difference) + \
                    color.blue + str(counter) + \
                    color.cyan + " " + met_fname + "\n" + \
                    color.white + " " * (4 + max_length)

        text_number = ""
        for line_number in fnames_dict[met_fname]:
            text_number += " " + str(line_number)
        if text_number != "":
            text_number = text_number[1:]
            text_line += " "

        text_line += common.get_bounded_text(text_number,
                                             4 + max_length + 1, 79) + "\n\n"

        text_list.append(text_line)
        index_dict[counter] = text_line[:-1]
        fname_dict[counter] = met_fname
        counter += 1

    if len(sys.argv) == 2:
        if text_list == []:
            text += color.green + " " * 4 + \
                color.green + "No file contains string " + \
                color.yellow + string + \
                color.green + "." + "\n" + \
                color.default
            print text
            sys.exit()
        else:
            for text_line in text_list:
                text += text_line
            text = text[:-1]
            print text
            sys.exit()

    if len(sys.argv) == 3:
        index = sys.argv[2]

        if common.positive_integer(index) is True:
            index = int(index)

        if index in index_dict.keys():

            # print selected file
            current_length = len(str(index))
            current_difference = max_length - current_length
            text = color.green + "\n" + \
                index_dict[index] + \
                color.default
            print text

            # open selected file
            cmd = common.command("emacs", fname_dict[index], "&")
            res = subprocess.call(cmd, shell=True)
            if res != 0:
                print common.get_err_msg(fname)
            sys.exit()
        else:
            text = color.green + "\n" + " " * 4 + \
                color.pink + "Warning" + \
                color.green + ": index " + \
                color.yellow + str(index) + \
                color.green + " out of range or invalid." + "\n" + \
                color.default
            print text
            sys.exit()
